/*
**    asdddddddd
**    price demo  API request message
**    sdfghjk
**    The price sdfgfhg API request message //asd /*asdfghj*/ AS
*/
syntax = "proto3";

/*
**    asdddddddd
**    sdfghjk
**    The price availabil
*/
package yxchfz.dalao.api;

/*
**    The price demo  API request message
**    aaaaaaaaaaaaaa
**    asdasdasd
**    The price demo  API request messageadssd
**    asdasdasd asdsad
**    y API request messageadssd
**    Chronological work  legs
*/
option java_package = "net.yxchfz.schema.api";
/*
**    Chronological work  legs
*/
option java_outer_classname = "Demo Proto";
/*
**    Chronological work  legss
*/
option java_multiple_files = true;

/*
**    currency must be the same as
*/
import "yixiaocuohuaifenzi/democontract/common/client.proto";
/*
**    Chronological work  legs
*/
import "yixiaocuohuaifenzi/democontract/common/pass.proto";
/*
**    asdfgh
*/
import "yixiaocuohuaifenzi/democontract/common/dasdasd.proto";
/*
**    sdsads
*/
import "yixiaocuohuaifenzi/democontract/common/ewegrhf.proto";

/*
**    The fasdghjk adsfgh
**    Chronological work  legs
**    
**    
**    safdf
**    Chronological work  legs
*/
message DemoRequestA {
    /*
    **    x must be set to "foo"
    */
    string x = 0 [(validate.rules).string.const = foo];
    /*
    **    asdfghjkytrewqrty
    **    adasdasd
    **    Basic request context data
    */
    common.RequestContext request_context = 1 [(validate.rules).message.skip = true];
    /*
    **    asdfghjkytrewqrty
    **    Worker groups
    */
    repeated common.WorkerGroup passenger_groups = 2 [(validate.rules).repeated.min_items = 3];
    /*
    **    adasdasd
    **    Chronological work  legs
    */
    repeated common.Tiger work_legs = 3 [(validate.rules).repeated = {min_items: 5, max_items: 10}];
    /*
    **    Use to validate the work  price, the currency must be the same as
    */
    common.Money quote_price = 4 [(validate.rules).message.skip = true];
}

/*
**    The fasdghjk adsfgh
**    Chronological work  legs
**    asdfg
**    
**    safdf
**    Chronological work  legss
*/
message DemoRequestB {
    /*
    **    asdfghjkytrewqrty
    **    Basic request context data
    */
    common.RequestContext request_context = 1 [(validate.rules).message.skip = true];
    /*
    **    asdfghjkytrewqrty
    **    Worker groups
    */
    repeated common.WorkerGroup passenger_groups = 2;
    /*
    **    adasdasd
    **    Chronological work  legs
    */
    repeated common.Tiger work_legs = 3;
    /*
    **    Use to validate the work  price, the currency must be the same as
    */
    common.Money quote_price = 4 [(validate.rules).message.skip = true];
    /*
    **    map field comment a
    **    map field comment b
    **    map field comment c
    **    map field comment d
    */
    map<string, Project> projects = 3        [(validate.rules)].map = {min_pairs: 5, max_pairs: 10}];
    /*
    **    Use to validate the work  price
    */
    common.Money quote_pasdasrice = 5;
}

/*
**    BaggageType
*/
enum BaggageType {
    /*
    **    BAGGAGE_TYPE_UNSPECIFIED
    */
    BAGGAGE_TYPE_UNSPECIFIED = 0 [(validate.rules).enum.const = 2];
    /*
    **    BAGGAGE_TYPE_CARRY_ON
    */
    BAGGAGE_TYPE_CARRY_ON = 1 [(validate.rules).enum.defined_only = true];
    /*
    **    asdfgh
    **    BAGGAGE_TYPE_CHECKED
    */
    BAGGAGE_TYPE_CHECKED = 2 [(validate.rules).enum = {not_in: [1]}];
}

message DemoRequestC {
    /*
    **    Basic request context data
    */
    common.RequestContext request_context = 1;
    /*
    **    Worker groups
    */
    repeated common.WorkerGroup passenger_groups = 2;
    /*
    **    adasdasd
    **    Chronological work  legs
    */
    repeated common.Tiger work_legs = 3;
    /*
    **    Use to validate the work  price, the currency must be the same as
    */
    common.Money quote_price = 4 [(validate.rules).any.required = true];
    /*
    **    Use to validate the work  price
    */
    common.Money quote_pasdasrice = 5 [(validate.rules).any.required = true];
}

/*
**    The price Demo  rpc service
*/
service Demo {
    /*
    **    asdfgf
    **    sadfdDemo
    */
    rpc DemoA (DemoRequest) returns (DemoResponse);
    /*
    **    Demo
    */
    rpc DemoB (DemoRequest) returns (DemoResponse);
}
